{"ast":null,"code":"import _asyncToGenerator from \"E:/Projetos/angular/food-project/food-ui/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { __decorate } from \"tslib\";\nimport { Component, Input } from '@angular/core';\nlet PaypalButtonComponent = class PaypalButtonComponent {\n  constructor(orderService, cartService, toastr, router) {\n    this.orderService = orderService;\n    this.cartService = cartService;\n    this.toastr = toastr;\n    this.router = router;\n  }\n\n  ngOnInit() {\n    var _this = this;\n\n    const self = this;\n    paypal.Buttons({\n      createOrder: (data, actions) => {\n        return actions.order.create({\n          purchase_units: [{\n            amount: {\n              currency_code: 'BRL',\n              value: self.order.totalPrice\n            }\n          }]\n        });\n      },\n      onApprove: function () {\n        var _ref = _asyncToGenerator(function* (data, actions) {\n          const payment = yield actions.order.capture();\n          _this.order.paymentId = payment.id;\n          self.orderService.pay(_this.order).subscribe({\n            next: orderId => {\n              _this.cartService.clearCart();\n\n              _this.router.navigateByUrl('/track/' + orderId);\n\n              _this.toastr.success('Pagemento feito com sucesso!', 'Concluído');\n            },\n            error: error => {\n              _this.toastr.error('Falha ao efetuar o pagamento', 'Error');\n            }\n          });\n        });\n\n        return function onApprove(_x, _x2) {\n          return _ref.apply(this, arguments);\n        };\n      }(),\n      onError: err => {\n        this.toastr.error('Payment Failed', 'Error');\n        console.log(err);\n      }\n    }).render(this.paypalElement.nativeElement);\n  }\n\n};\n\n__decorate([Input()], PaypalButtonComponent.prototype, \"order\", void 0);\n\nPaypalButtonComponent = __decorate([Component({\n  selector: 'paypal-button',\n  templateUrl: './paypal-button.component.html',\n  styleUrls: ['./paypal-button.component.scss']\n})], PaypalButtonComponent);\nexport { PaypalButtonComponent };","map":{"version":3,"mappings":";;AAAA,SAASA,SAAT,EAAoBC,KAApB,QAAoD,eAApD;AAaA,IAAaC,qBAAqB,GAAlC,MAAaA,qBAAb,CAAkC;EAGhCC,YAEUC,YAFV,EAGUC,WAHV,EAIUC,MAJV,EAKUC,MALV,EAKwB;IAHd;IACA;IACA;IACA;EAAmB;;EAE7BC,QAAQ;IAAA;;IACN,MAAMC,IAAI,GAAG,IAAb;IACAC,MAAM,CACLC,OADD,CACS;MACPC,WAAW,EAAE,CAACC,IAAD,EAAYC,OAAZ,KAA4B;QACvC,OAAOA,OAAO,CAACC,KAAR,CAAcC,MAAd,CAAqB;UAC1BC,cAAc,EAAE,CACd;YACEC,MAAM,EAAE;cACNC,aAAa,EAAE,KADT;cAENC,KAAK,EAAEX,IAAI,CAACM,KAAL,CAAWM;YAFZ;UADV,CADc;QADU,CAArB,CAAP;MAUD,CAZM;MAcPC,SAAS;QAAA,6BAAE,WAAOT,IAAP,EAAkBC,OAAlB,EAAkC;UAC3C,MAAMS,OAAO,SAAST,OAAO,CAACC,KAAR,CAAcS,OAAd,EAAtB;UACA,KAAI,CAACT,KAAL,CAAWU,SAAX,GAAuBF,OAAO,CAACG,EAA/B;UACAjB,IAAI,CAACL,YAAL,CAAkBuB,GAAlB,CAAsB,KAAI,CAACZ,KAA3B,EAAkCa,SAAlC,CACE;YACEC,IAAI,EAAGC,OAAD,IAAY;cAChB,KAAI,CAACzB,WAAL,CAAiB0B,SAAjB;;cACA,KAAI,CAACxB,MAAL,CAAYyB,aAAZ,CAA0B,YAAYF,OAAtC;;cACA,KAAI,CAACxB,MAAL,CAAY2B,OAAZ,CACE,8BADF,EAEE,WAFF;YAID,CARH;YASEC,KAAK,EAAGA,KAAD,IAAU;cACf,KAAI,CAAC5B,MAAL,CAAY4B,KAAZ,CAAkB,8BAAlB,EAAkD,OAAlD;YACD;UAXH,CADF;QAeD,CAlBQ;;QAAA;UAAA;QAAA;MAAA,GAdF;MAkCPC,OAAO,EAAGC,GAAD,IAAa;QACpB,KAAK9B,MAAL,CAAY4B,KAAZ,CAAkB,gBAAlB,EAAoC,OAApC;QACAG,OAAO,CAACC,GAAR,CAAYF,GAAZ;MACD;IArCM,CADT,EAwCCG,MAxCD,CAwCQ,KAAKC,aAAL,CAAmBC,aAxC3B;EA0CD;;AAtD+B,CAAlC;;AAEWC,YAARzC,KAAK,EAAG;;AAFEC,qBAAqB,eALjCF,SAAS,CAAC;EACT2C,QAAQ,EAAE,eADD;EAETC,WAAW,EAAE,gCAFJ;EAGTC,SAAS,EAAE,CAAC,gCAAD;AAHF,CAAD,CAKwB,GAArB3C,qBAAqB,CAArB;SAAAA","names":["Component","Input","PaypalButtonComponent","constructor","orderService","cartService","toastr","router","ngOnInit","self","paypal","Buttons","createOrder","data","actions","order","create","purchase_units","amount","currency_code","value","totalPrice","onApprove","payment","capture","paymentId","id","pay","subscribe","next","orderId","clearCart","navigateByUrl","success","error","onError","err","console","log","render","paypalElement","nativeElement","__decorate","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["E:\\Projetos\\angular\\food-project\\food-ui\\src\\app\\components\\partials\\paypal-button\\paypal-button.component.ts"],"sourcesContent":["import { Component, Input, OnInit, ViewChild } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { ToastrService } from 'ngx-toastr';\nimport { CartService } from 'src/app/services/cart.service';\nimport { OrderService } from 'src/app/services/order.service';\nimport { Order } from 'src/app/shared/models';\n\ndeclare var paypal: any;\n@Component({\n  selector: 'paypal-button',\n  templateUrl: './paypal-button.component.html',\n  styleUrls: ['./paypal-button.component.scss']\n})\nexport class PaypalButtonComponent implements OnInit {\n\n  @Input() order!: Order\n  @ViewChild('paypal', {static: true})\n  constructor(\n    private orderService: OrderService,\n    private cartService: CartService,\n    private toastr: ToastrService,\n    private router: Router) { }\n\n  ngOnInit(): void {\n    const self = this;\n    paypal\n    .Buttons({\n      createOrder: (data: any, actions: any) => {\n        return actions.order.create({\n          purchase_units: [\n            {\n              amount: {\n                currency_code: 'BRL',\n                value: self.order.totalPrice,\n              },\n            },\n          ],\n        });\n      },\n\n      onApprove: async (data: any, actions: any) => {\n        const payment = await actions.order.capture();\n        this.order.paymentId = payment.id;\n        self.orderService.pay(this.order).subscribe(\n          {\n            next: (orderId) => {\n              this.cartService.clearCart();\n              this.router.navigateByUrl('/track/' + orderId);\n              this.toastr.success(\n                'Pagemento feito com sucesso!',\n                'Concluído'\n              );\n            },\n            error: (error) => {\n              this.toastr.error('Falha ao efetuar o pagamento', 'Error');\n            }\n          }\n        );\n      },\n\n      onError: (err: any) => {\n        this.toastr.error('Payment Failed', 'Error');\n        console.log(err);\n      },\n    })\n    .render(this.paypalElement.nativeElement);\n\n  }\n\n}"]},"metadata":{},"sourceType":"module"}