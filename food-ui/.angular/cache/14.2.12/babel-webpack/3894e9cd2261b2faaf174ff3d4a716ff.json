{"ast":null,"code":"import _asyncToGenerator from \"E:/Projetos/angular/food-project/food-ui/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/order.service\";\nimport * as i2 from \"src/app/services/cart.service\";\nexport class PaypalButtonComponent {\n  constructor(orderService, cartService) {\n    this.orderService = orderService;\n    this.cartService = cartService;\n  }\n\n  ngOnInit() {\n    var _this = this;\n\n    const self = this;\n    paypal.Buttons({\n      createOrder: (data, actions) => {\n        return actions.order.create({\n          purchase_units: [{\n            amount: {\n              currency_code: 'BRL',\n              value: self.order.totalPrice\n            }\n          }]\n        });\n      },\n      onApprove: function () {\n        var _ref = _asyncToGenerator(function* (data, actions) {\n          const payment = yield actions.order.capture();\n          _this.order.paymentId = payment.id;\n          self.orderService.pay(_this.order).subscribe({\n            next: orderId => {\n              _this.cartService.clearCart();\n\n              _this.router.navigateByUrl('/track/' + orderId);\n\n              _this.toastrService.success('Payment Saved Successfully', 'Success');\n            },\n            error: error => {\n              _this.toastrService.error('Payment Save Failed', 'Error');\n            }\n          });\n        });\n\n        return function onApprove(_x, _x2) {\n          return _ref.apply(this, arguments);\n        };\n      }(),\n      onError: err => {\n        this.toastrService.error('Payment Failed', 'Error');\n        console.log(err);\n      }\n    }).render(this.paypalElement.nativeElement);\n  }\n\n}\n\nPaypalButtonComponent.ɵfac = function PaypalButtonComponent_Factory(t) {\n  return new (t || PaypalButtonComponent)(i0.ɵɵdirectiveInject(i1.OrderService), i0.ɵɵdirectiveInject(i2.CartService));\n};\n\nPaypalButtonComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: PaypalButtonComponent,\n  selectors: [[\"paypal-button\"]],\n  inputs: {\n    order: \"order\"\n  },\n  decls: 0,\n  vars: 0,\n  template: function PaypalButtonComponent_Template(rf, ctx) {},\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJwYXlwYWwtYnV0dG9uLmNvbXBvbmVudC5zY3NzIn0= */\"]\n});","map":{"version":3,"mappings":";;;;AAWA,OAAM,MAAOA,qBAAP,CAA4B;EAGhCC,YACUC,YADV,EAEUC,WAFV,EAEkC;IADxB;IACA;EAA6B;;EAEvCC,QAAQ;IAAA;;IACN,MAAMC,IAAI,GAAG,IAAb;IACAC,MAAM,CACLC,OADD,CACS;MACPC,WAAW,EAAE,CAACC,IAAD,EAAYC,OAAZ,KAA4B;QACvC,OAAOA,OAAO,CAACC,KAAR,CAAcC,MAAd,CAAqB;UAC1BC,cAAc,EAAE,CACd;YACEC,MAAM,EAAE;cACNC,aAAa,EAAE,KADT;cAENC,KAAK,EAAEX,IAAI,CAACM,KAAL,CAAWM;YAFZ;UADV,CADc;QADU,CAArB,CAAP;MAUD,CAZM;MAcPC,SAAS;QAAA,6BAAE,WAAOT,IAAP,EAAkBC,OAAlB,EAAkC;UAC3C,MAAMS,OAAO,SAAST,OAAO,CAACC,KAAR,CAAcS,OAAd,EAAtB;UACA,KAAI,CAACT,KAAL,CAAWU,SAAX,GAAuBF,OAAO,CAACG,EAA/B;UACAjB,IAAI,CAACH,YAAL,CAAkBqB,GAAlB,CAAsB,KAAI,CAACZ,KAA3B,EAAkCa,SAAlC,CACE;YACEC,IAAI,EAAGC,OAAD,IAAY;cAChB,KAAI,CAACvB,WAAL,CAAiBwB,SAAjB;;cACA,KAAI,CAACC,MAAL,CAAYC,aAAZ,CAA0B,YAAYH,OAAtC;;cACA,KAAI,CAACI,aAAL,CAAmBC,OAAnB,CACE,4BADF,EAEE,SAFF;YAID,CARH;YASEC,KAAK,EAAGA,KAAD,IAAU;cACf,KAAI,CAACF,aAAL,CAAmBE,KAAnB,CAAyB,qBAAzB,EAAgD,OAAhD;YACD;UAXH,CADF;QAeD,CAlBQ;;QAAA;UAAA;QAAA;MAAA,GAdF;MAkCPC,OAAO,EAAGC,GAAD,IAAa;QACpB,KAAKJ,aAAL,CAAmBE,KAAnB,CAAyB,gBAAzB,EAA2C,OAA3C;QACAG,OAAO,CAACC,GAAR,CAAYF,GAAZ;MACD;IArCM,CADT,EAwCCG,MAxCD,CAwCQ,KAAKC,aAAL,CAAmBC,aAxC3B;EA0CD;;AAnD+B;;;mBAArBvC,uBAAqBwC;AAAA;;;QAArBxC;EAAqByC;EAAAC;IAAA/B;EAAA;EAAAgC;EAAAC;EAAAC;EAAAC","names":["PaypalButtonComponent","constructor","orderService","cartService","ngOnInit","self","paypal","Buttons","createOrder","data","actions","order","create","purchase_units","amount","currency_code","value","totalPrice","onApprove","payment","capture","paymentId","id","pay","subscribe","next","orderId","clearCart","router","navigateByUrl","toastrService","success","error","onError","err","console","log","render","paypalElement","nativeElement","i0","selectors","inputs","decls","vars","template","styles"],"sourceRoot":"","sources":["E:\\Projetos\\angular\\food-project\\food-ui\\src\\app\\components\\partials\\paypal-button\\paypal-button.component.ts"],"sourcesContent":["import { Component, Input, OnInit } from '@angular/core';\nimport { CartService } from 'src/app/services/cart.service';\nimport { OrderService } from 'src/app/services/order.service';\nimport { Order } from 'src/app/shared/models';\n\ndeclare var paypal: any;\n@Component({\n  selector: 'paypal-button',\n  templateUrl: './paypal-button.component.html',\n  styleUrls: ['./paypal-button.component.scss']\n})\nexport class PaypalButtonComponent implements OnInit {\n\n  @Input() order!: Order\n  constructor(\n    private orderService: OrderService,\n    private cartService: CartService) { }\n\n  ngOnInit(): void {\n    const self = this;\n    paypal\n    .Buttons({\n      createOrder: (data: any, actions: any) => {\n        return actions.order.create({\n          purchase_units: [\n            {\n              amount: {\n                currency_code: 'BRL',\n                value: self.order.totalPrice,\n              },\n            },\n          ],\n        });\n      },\n\n      onApprove: async (data: any, actions: any) => {\n        const payment = await actions.order.capture();\n        this.order.paymentId = payment.id;\n        self.orderService.pay(this.order).subscribe(\n          {\n            next: (orderId) => {\n              this.cartService.clearCart();\n              this.router.navigateByUrl('/track/' + orderId);\n              this.toastrService.success(\n                'Payment Saved Successfully',\n                'Success'\n              );\n            },\n            error: (error) => {\n              this.toastrService.error('Payment Save Failed', 'Error');\n            }\n          }\n        );\n      },\n\n      onError: (err: any) => {\n        this.toastrService.error('Payment Failed', 'Error');\n        console.log(err);\n      },\n    })\n    .render(this.paypalElement.nativeElement);\n\n  }\n\n}"]},"metadata":{},"sourceType":"module"}